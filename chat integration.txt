// CryptoJS library is required for decryption
// Make sure to include: <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>

/**
 * Decode encrypted chat user data
 * 
 * @param {string} encryptedData - Base64 encoded encrypted data from URL parameter 'ur'
 * @param {string} encryptionKey - The encryption key (should match Laravel APP_KEY)
 * @returns {Object|null} Decoded user data object or null if decryption fails
 */
export function decodeChatUserData(encryptedData, encryptionKey) {
    try {
        // Decode base64
        const decodedData = atob(encryptedData);
        
        // Parse the encrypted data (Laravel format)
        const encryptedParts = JSON.parse(decodedData);
        
        if (!encryptedParts.iv || !encryptedParts.value || !encryptedParts.mac) {
            throw new Error('Invalid encrypted data format');
        }
        
        // Decrypt using AES-256-CBC
        const decrypted = CryptoJS.AES.decrypt(
            encryptedParts.value,
            CryptoJS.enc.Utf8.parse(encryptionKey),
            {
                iv: CryptoJS.enc.Base64.parse(encryptedParts.iv),
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            }
        );
        
        const decryptedString = decrypted.toString(CryptoJS.enc.Utf8);
        
        if (!decryptedString) {
            throw new Error('Decryption failed');
        }
        
        // Split the decrypted string by '||'
        const userDataParts = decryptedString.split('||');
        
        if (userDataParts.length !== 5) {
            throw new Error('Invalid user data format');
        }
        
        // Return structured user data
        return {
            id: parseInt(userDataParts[0]),
            type: userDataParts[1],
            name: userDataParts[2],
            email: userDataParts[3],
            phone: userDataParts[4]
        };
        
    } catch (error) {
        console.error('Error decoding chat user data:', error);
        return null;
    }
}

/**
 * Get user data from URL parameters
 * 
 * @param {string} encryptionKey - The encryption key
 * @returns {Object|null} Decoded user data or null
 */
export function getChatUserDataFromURL(encryptionKey) {
    const urlParams = new URLSearchParams(window.location.search);
    const encryptedData = urlParams.get('ur');
    
    if (!encryptedData) {
        return null;
    }
    
    return decodeChatUserData(encryptedData, encryptionKey);
}

/**
 * React Hook for getting chat user data
 * 
 * @param {string} encryptionKey - The encryption key
 * @returns {Object|null} Decoded user data or null
 */
export function useChatUserData(encryptionKey) {
    const [userData, setUserData] = React.useState(null);
    const [loading, setLoading] = React.useState(true);
    const [error, setError] = React.useState(null);
    
    React.useEffect(() => {
        try {
            const data = getChatUserDataFromURL(encryptionKey);
            if (data) {
                setUserData(data);
            } else {
                setError('Failed to decode user data');
            }
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    }, [encryptionKey]);
    
    return { userData, loading, error };
}

/**
 * Example React component usage:
 * 
 * function ChatComponent() {
 *     const { userData, loading, error } = useChatUserData('your-encryption-key');
 *     
 *     if (loading) return <div>Loading...</div>;
 *     if (error) return <div>Error: {error}</div>;
 *     if (!userData) return <div>No user data found</div>;
 *     
 *     return (
 *         <div>
 *             <h2>Welcome, {userData.name}!</h2>
 *             <p>User Type: {userData.type}</p>
 *             <p>Email: {userData.email}</p>
 *         </div>
 *     );
 * }
 */

// Export for non-module usage
if (typeof window !== 'undefined') {
    window.ChatDecoder = {
        decodeChatUserData,
        getChatUserDataFromURL,
        useChatUserData
    };
}